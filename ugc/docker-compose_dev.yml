name: "ugc"

services:

  ugc_api:
    container_name: ugc_api
    build: .
    networks:
      - main_network_ugc_api
    volumes:
      - ./src:/opt/app/src
    depends_on:
      redis_ugc:
        condition: service_healthy
    ports:
      - "9001:9001"


  redis_ugc:
    image: redis:alpine
    container_name: redis_ugc
    expose:
      - "6379"
    volumes:
      - ./redis_data:/data
    networks:
      - main_network_ugc_api

    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3




  kafka-0:
    image: bitnami/kafka:3.4
    expose:
      - "9094"


    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka-0:9093,1@kafka-1:9093,2@kafka-2:9093
      - KAFKA_KRAFT_CLUSTER_ID=abcdefghijklmnopqrstuv
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka-0:9092,EXTERNAL://127.0.0.1:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT

    volumes:
      - kafka_0_data:/bitnami/kafka
      - ./log4j.properties:/opt/bitnami/kafka/config/log4j.properties:ro

    networks:
      - main_network_ugc_api


   
  kafka-1:
    image: bitnami/kafka:3.4
    expose:
      - "9095"
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka-0:9093,1@kafka-1:9093,2@kafka-2:9093
      - KAFKA_KRAFT_CLUSTER_ID=abcdefghijklmnopqrstuv
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9095
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka-1:9092,EXTERNAL://127.0.0.1:9095
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
   
    volumes:
      - kafka_1_data:/bitnami/kafka
      - ./log4j.properties:/opt/bitnami/kafka/config/log4j.properties:ro


    networks:
      - main_network_ugc_api

   
  kafka-2:
    image: bitnami/kafka:3.4
    expose:
      - "9096"
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_NODE_ID=2
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka-0:9093,1@kafka-1:9093,2@kafka-2:9093
      - KAFKA_KRAFT_CLUSTER_ID=abcdefghijklmnopqrstuv
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9096
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka-2:9092,EXTERNAL://127.0.0.1:9096
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
    volumes:
      - kafka_2_data:/bitnami/kafka
      - ./log4j.properties:/opt/bitnami/kafka/config/log4j.properties:ro


    networks:
      - main_network_ugc_api


  ui:
    image: provectuslabs/kafka-ui:v0.7.0
    ports:
      - "8080:8080"
    environment:
      - KAFKA_CLUSTERS_0_BOOTSTRAP_SERVERS=kafka-0:9092
      - KAFKA_CLUSTERS_0_NAME=kraft

    networks:
      - main_network_ugc_api




  clickhouse-server:
    image: clickhouse/clickhouse-server:23
    container_name: clickhouse_server
    env_file:
      - ./src/core/.env 

    ports:
      - "8123:8123"   
      - "9000:9000"
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - main_network_ugc_api

  etl-app:
    build: 
      context: .
      dockerfile: Dockerfile_etl
      
    container_name: etl_service
    volumes:
      - ./src:/opt/app/src

    depends_on:
      - clickhouse-server
    networks:
      - main_network_ugc_api


volumes:
  kafka_0_data:
  kafka_1_data:
  kafka_2_data:


networks:
  main_network_ugc_api:
    name: main_network_ugc_api
    driver: bridge






  



